* Add all examples from the docs to test cases
* Switch to xor for guard negation (and document!)

Longer-term
* code coverage van tests bekijken
* kijken of bij return de context triviaal is
* lazy evalation: testen, in voorbeeld kijken of onnodige ifelsess gebeuren?
* Switch naar bytecode controlflowgraph? Loops in termen daarvan detecteren?
* relative guards?
  Relative guarding: xab, a^b, maak er xac van, c is b of ^b en dus 1, dan met
  x^a, zou goed moeten gaan? Eerst niet doen! Depends on order? Probably not
* What to do if oblivious guard is not a bit?
* Use array indexing instead of get, set
* implementeer oblivious proxy/ensemble: _(obj), dereference with ._(),
  cartesisch product guards bij functietoepassing
* generieke obliv-wrap die alles doorgeeft aan zijn onderliggende value
  (modulo een paar optimalisaties)? kunnen we daar toch een impliciete
  deepcopy op doen?
* Ook met spdz proberen?
* Ranges: oblivious stride implementeren?
* Native variant met decorators? Toch over nadenken?
